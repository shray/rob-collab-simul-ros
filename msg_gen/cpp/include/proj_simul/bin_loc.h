/* Auto-generated by genmsg_cpp for file /home/shray/groovy_workspace/sandbox/proj_simul/msg/bin_loc.msg */
#ifndef PROJ_SIMUL_MESSAGE_BIN_LOC_H
#define PROJ_SIMUL_MESSAGE_BIN_LOC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/UInt8.h"
#include "std_msgs/String.h"

namespace proj_simul
{
template <class ContainerAllocator>
struct bin_loc_ {
  typedef bin_loc_<ContainerAllocator> Type;

  bin_loc_()
  : bin_id()
  , location()
  {
  }

  bin_loc_(const ContainerAllocator& _alloc)
  : bin_id(_alloc)
  , location(_alloc)
  {
  }

  typedef  ::std_msgs::UInt8_<ContainerAllocator>  _bin_id_type;
   ::std_msgs::UInt8_<ContainerAllocator>  bin_id;

  typedef  ::std_msgs::String_<ContainerAllocator>  _location_type;
   ::std_msgs::String_<ContainerAllocator>  location;


  typedef boost::shared_ptr< ::proj_simul::bin_loc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proj_simul::bin_loc_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct bin_loc
typedef  ::proj_simul::bin_loc_<std::allocator<void> > bin_loc;

typedef boost::shared_ptr< ::proj_simul::bin_loc> bin_locPtr;
typedef boost::shared_ptr< ::proj_simul::bin_loc const> bin_locConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::proj_simul::bin_loc_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::proj_simul::bin_loc_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace proj_simul

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::proj_simul::bin_loc_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::proj_simul::bin_loc_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::proj_simul::bin_loc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5a1e584c103fee9bb86c3a78d3bc4869";
  }

  static const char* value(const  ::proj_simul::bin_loc_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5a1e584c103fee9bULL;
  static const uint64_t static_value2 = 0xb86c3a78d3bc4869ULL;
};

template<class ContainerAllocator>
struct DataType< ::proj_simul::bin_loc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "proj_simul/bin_loc";
  }

  static const char* value(const  ::proj_simul::bin_loc_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::proj_simul::bin_loc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/UInt8 bin_id\n\
std_msgs/String location\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::proj_simul::bin_loc_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::proj_simul::bin_loc_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bin_id);
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct bin_loc_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proj_simul::bin_loc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::proj_simul::bin_loc_<ContainerAllocator> & v) 
  {
    s << indent << "bin_id: ";
s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.bin_id);
    s << indent << "location: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PROJ_SIMUL_MESSAGE_BIN_LOC_H

